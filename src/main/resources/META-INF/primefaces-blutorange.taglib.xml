<?xml version="1.0"?>
<facelet-taglib version="2.0"
                xmlns="http://java.sun.com/xml/ns/javaee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd">

<namespace>http://github.com/blutorange</namespace>
    <tag>
        <description>
            <![CDATA[A JSF component that wraps the JavaScript libary <a href="https://microsoft.github.io/monaco-editor/">Monaco Editor</a>.
            Requires <a href="https://www.primefaces.org/">Primefaces</a> to be available in the class path.]]>
        </description>
        <tag-name>monacoEditor</tag-name>
        <component>
            <component-type>com.github.blutorange.primefaces.component.MonacoEditor</component-type>
            <renderer-type>com.github.blutorange.primefaces.component.MonacoEditorRenderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Unique identifier of the component in a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied when this element is rendered.
                This value is passed through as the "class" attribute to the generated markup.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression referring to a server side UIComponent instance in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of the client side widget.]]>
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Value of the component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines if the editor is readonly.]]>
            </description>
            <name>readonly</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines if the editor is disabled.]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The tab index to assign to the editor. If not given, no tab index will be assigned.]]>
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An EL expression or a literal text that defines a converter for the component. When it's an EL
                expression, it's resolved to a converter instance. In case it's a static text, it must refer to a
                converter id.]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Marks component as required.]]>
            </description>
            <name>required</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Message to display when required field validation fails.]]>
            </description>
            <name>requiredMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Message to display when conversion fails.]]>
            </description>
            <name>converterMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Message to display when validation fails.]]>
            </description>
            <name>validatorMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A method expression referring to a method validating the input.]]>
            </description>
            <name>validator</name>
            <required>false</required>
            <type>javax.faces.validator.Validator</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when the editor area receives focus.]]>
            </description>
            <name>onFocus</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when the editor area loses focus.]]>
            </description>
            <name>onBlur</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when the editor content changes.]]>
            </description>
            <name>onChange</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when text was pasted into the editor.]]>
            </description>
            <name>onPaste</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when a mousedown event was triggered on the editor area.]]>
            </description>
            <name>onMousedown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when a mousemove event was triggered on the editor area.]]>
            </description>
            <name>onMousemove</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when a mouseup event was triggered on the editor area.]]>
            </description>
            <name>onMouseup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when a keyup event was triggered on the editor area.]]>
            </description>
            <name>onKeyup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when a keydown event was triggered on the editor area.]]>
            </description>
            <name>onKeydown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client side callback when a keypress (onDidType) event was triggered on the editor area.]]>
            </description>
            <name>onKeypress</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Interface for the user interface. Built-in languages are "bg", "de", "en", "es", "fr", "hu", "it", "ja", "ko", "ps", "pt-br", "ru", "tr", "uk", "zh-hans", and "zh-hant".
                You can also use a custom langauge, if you also specify the language file to be used via the option
                <code>uiLanguageUri</code>.]]>
            </description>
            <name>uiLanguage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[For custom language files. If given, this is used instead of the built-in language files. It is
                prefixed with the appropriate base URL (eg. <code>http://.../java.faces.resources/</code>). You need to
                append the <code>.xhtml</code> suffix yourself. If the resource is inside a resource library, specify the
                URL parameter <code>ln</code>, eg. <code>mylang.js.xhtml?ln=mylib</code>. See the built-in language files
                for the format (<code>/META-INF/resources/primefaces-blutorange/monacoEditor/locale/</code>).]]>
            </description>
            <name>uiLanguageUri</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[
                <p>An extender object to further customize the monaco editor via JavaScript. This can be either:</p>
                <ul>
                  <li>unset, in which case no further customization is performed</li>
                  <li>a JavaScript expression that evaluates to an extender object</li>
                  <li>a resource whose content evaluates to an extender object. The resource name is prefixed with
                  the appropriate base URL (eg. <code>http://.../java.faces.resources/</code>). You need to append
                  the <code>.xhtml</code> suffix yourself. If the resource is inside a resource library, specify the
                  URL parameter <code>ln</code>, eg. <code>myextender.js.xhtml?ln=mylib</code>.</li>
                </ul>
                <p>The given extender string is first evaluated as a JavaScript expression; and if that fails, interpreted
                as a resource file.</p>
                The extender object may one or more several properties:
                <ul>
                <li>beforeCreate(editorWidget, options). Called before the monaco editor is created. It is passed
                the current options object that would be used to initialize the monaco editor. If this callback
                does not return a value, the options as passed are used. If it returns a new options object, that
                options object is used. If it returns a thenable/Promise, the monaco editor is created only once the
                Promise resolves (successfully). If the Promise returns a new options object, it is used to create the
                editor. See <a href="https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html">IEditorConstructionOptions</a>
                for all editor options.</li>
                <li>afterCreate(editorWidget). Called after the editor was created.</li>
                <li>beforeDestroy(editorWidget). Called before the editor is destroyed, eg. when updating a component via AJAX.</li>
                <li>afterDestroy(editorWidget). Called after the editor is destroyed, eg. when updating a component via AJAX. Note that <code>editorWidget.getMonaco()</code> now returns undefined.</li>
                <li>createWorker(editorWidget, moduleId, label). Called when a worker for additional language support needs to be created. By default, monaco editor ships with the workers for JSON, CSS, HTML, and TYPESCRIPT. The label is the name of the language, eg. <code>css</code> or <code>javascript</code>. Must return the worker to be used for the given language. Note that <code>editorWidget.getMonaco()</code> returns undefined as the monaco editor was not created yet.</li>
                </ul>
                ]]>
            </description>
            <name>extender</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The monaco editor has a unique URI for an opened model. This is the directory (path) for that URI, with parts separated by slashes. If not given, it is taken from the client ID of this component.]]>
            </description>
            <name>directory</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The monaco editor has a unique URI for an opened model. This is the basename for that URI, without the extension. If not given, default to 'file'.]]>
            </description>
            <name>basename</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The monaco editor has a unique URI for an opened model. This is the extension for that URI, with or without the period. If not given, it is inferred from the (code) language.]]>
            </description>
            <name>extension</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Width of the editor CSS units, set as an inline style. Set to the empty string in case you want to size the editor via CSS.]]>
            </description>
            <name>width</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Height of the editor CSS units, set as an inline style. Set to the empty string in case you want to size the editor via CSS.]]>
            </description>
            <name>height</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Options for the monaco code editor. This is a simple wrapper around the TypeScript API, see
                <a href="https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html">IEditorConstructionOptions</a>
                The code language can be set via the <code>javascript</code> option.]]>
            </description>
            <name>editorOptions</name>
            <required>false</required>
            <type>com.github.blutorange.primefaces.config.monacoeditor.EditorOptions</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If <code>true</code>, resizes the editor automatically when the container element changes its size.
                Please note that this makes uses of the <a href="https://wicg.github.io/ResizeObserver/">new ResizeObserver API</a>
                and <a href="https://caniuse.com/#feat=resizeobserver">works only in newer browers.</a> Otherwise, search
                for a polyfill or resize the editor manually via <code>PF("editorWidgetVar").getMonaco().layout()</code>]]>
            </description>
            <name>autoResize</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
</facelet-taglib>
